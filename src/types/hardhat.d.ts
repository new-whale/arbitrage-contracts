/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AggregationExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregationExecutor__factory>;
    getContractFactory(
      name: "Eklipse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Eklipse__factory>;
    getContractFactory(
      name: "EklipseHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EklipseHelper__factory>;
    getContractFactory(
      name: "IEklipsePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEklipsePool__factory>;
    getContractFactory(
      name: "IEklipseRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEklipseRouter__factory>;
    getContractFactory(
      name: "I4i",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.I4i__factory>;
    getContractFactory(
      name: "I4iHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.I4iHelper__factory>;
    getContractFactory(
      name: "II4iPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.II4iPool__factory>;
    getContractFactory(
      name: "II4iRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.II4iRouter__factory>;
    getContractFactory(
      name: "IPoolRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolRegistry__factory>;
    getContractFactory(
      name: "Curve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Curve__factory>;
    getContractFactory(
      name: "ICurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurve__factory>;
    getContractFactory(
      name: "ICurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: "IAggregationExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregationExecutor__factory>;
    getContractFactory(
      name: "IAggregationRouterV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregationRouterV1__factory>;
    getContractFactory(
      name: "IEisenMultihopRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEisenMultihopRouter__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IViewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IViewer__factory>;
    getContractFactory(
      name: "IWKLAY",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWKLAY__factory>;
    getContractFactory(
      name: "IUni2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUni2__factory>;
    getContractFactory(
      name: "Uni2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uni2__factory>;
    getContractFactory(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ClaimHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimHelper__factory>;
    getContractFactory(
      name: "Claimswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Claimswap__factory>;
    getContractFactory(
      name: "IClaimswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimswap__factory>;
    getContractFactory(
      name: "Definix",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Definix__factory>;
    getContractFactory(
      name: "DefinixHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefinixHelper__factory>;
    getContractFactory(
      name: "IDefinixHerodotus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDefinixHerodotus__factory>;
    getContractFactory(
      name: "IDefinixRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDefinixRouter__factory>;
    getContractFactory(
      name: "IDefinixRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDefinixRouter01__factory>;
    getContractFactory(
      name: "IKlayswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKlayswap__factory>;
    getContractFactory(
      name: "IKlayswapExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKlayswapExchange__factory>;
    getContractFactory(
      name: "Klayswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Klayswap__factory>;
    getContractFactory(
      name: "KSPHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KSPHelper__factory>;
    getContractFactory(
      name: "INeuronswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INeuronswap__factory>;
    getContractFactory(
      name: "NeuronHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NeuronHelper__factory>;
    getContractFactory(
      name: "Neuronswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Neuronswap__factory>;
    getContractFactory(
      name: "IPaladex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaladex__factory>;
    getContractFactory(
      name: "Paladex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Paladex__factory>;
    getContractFactory(
      name: "PaladexHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PaladexHelper__factory>;
    getContractFactory(
      name: "PalaViewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PalaViewer__factory>;
    getContractFactory(
      name: "IRoundrobinRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoundrobinRouter__factory>;
    getContractFactory(
      name: "Roundrobin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Roundrobin__factory>;
    getContractFactory(
      name: "RoundrobinHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoundrobinHelper__factory>;
    getContractFactory(
      name: "IUfoswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUfoswap__factory>;
    getContractFactory(
      name: "IUfoswapExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUfoswapExchange__factory>;
    getContractFactory(
      name: "Ufoswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ufoswap__factory>;
    getContractFactory(
      name: "UfoswapHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UfoswapHelper__factory>;

    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AggregationExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregationExecutor>;
    getContractAt(
      name: "Eklipse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Eklipse>;
    getContractAt(
      name: "EklipseHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EklipseHelper>;
    getContractAt(
      name: "IEklipsePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEklipsePool>;
    getContractAt(
      name: "IEklipseRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEklipseRouter>;
    getContractAt(
      name: "I4i",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.I4i>;
    getContractAt(
      name: "I4iHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.I4iHelper>;
    getContractAt(
      name: "II4iPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.II4iPool>;
    getContractAt(
      name: "II4iRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.II4iRouter>;
    getContractAt(
      name: "IPoolRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolRegistry>;
    getContractAt(
      name: "Curve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Curve>;
    getContractAt(
      name: "ICurve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurve>;
    getContractAt(
      name: "ICurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurvePool>;
    getContractAt(
      name: "IAggregationExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregationExecutor>;
    getContractAt(
      name: "IAggregationRouterV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregationRouterV1>;
    getContractAt(
      name: "IEisenMultihopRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEisenMultihopRouter>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IViewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IViewer>;
    getContractAt(
      name: "IWKLAY",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWKLAY>;
    getContractAt(
      name: "IUni2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUni2>;
    getContractAt(
      name: "Uni2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Uni2>;
    getContractAt(
      name: "Multicall2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ClaimHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimHelper>;
    getContractAt(
      name: "Claimswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Claimswap>;
    getContractAt(
      name: "IClaimswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimswap>;
    getContractAt(
      name: "Definix",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Definix>;
    getContractAt(
      name: "DefinixHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefinixHelper>;
    getContractAt(
      name: "IDefinixHerodotus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDefinixHerodotus>;
    getContractAt(
      name: "IDefinixRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDefinixRouter>;
    getContractAt(
      name: "IDefinixRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDefinixRouter01>;
    getContractAt(
      name: "IKlayswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKlayswap>;
    getContractAt(
      name: "IKlayswapExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKlayswapExchange>;
    getContractAt(
      name: "Klayswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Klayswap>;
    getContractAt(
      name: "KSPHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KSPHelper>;
    getContractAt(
      name: "INeuronswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INeuronswap>;
    getContractAt(
      name: "NeuronHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NeuronHelper>;
    getContractAt(
      name: "Neuronswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Neuronswap>;
    getContractAt(
      name: "IPaladex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaladex>;
    getContractAt(
      name: "Paladex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Paladex>;
    getContractAt(
      name: "PaladexHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PaladexHelper>;
    getContractAt(
      name: "PalaViewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PalaViewer>;
    getContractAt(
      name: "IRoundrobinRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoundrobinRouter>;
    getContractAt(
      name: "Roundrobin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Roundrobin>;
    getContractAt(
      name: "RoundrobinHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoundrobinHelper>;
    getContractAt(
      name: "IUfoswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUfoswap>;
    getContractAt(
      name: "IUfoswapExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUfoswapExchange>;
    getContractAt(
      name: "Ufoswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ufoswap>;
    getContractAt(
      name: "UfoswapHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UfoswapHelper>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
