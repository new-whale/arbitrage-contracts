/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EklipseHelper,
  EklipseHelperInterface,
} from "../../../../contracts/Curve/Eklipse.sol/EklipseHelper";

const _abi = [
  {
    inputs: [],
    name: "CurveRouter",
    outputs: [
      {
        internalType: "contract IEklipseRouter",
        name: "",
        type: "IEklipseRouter",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WKLAY",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60b6610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060475760003560e01c8063249502d714604c5780634eca1fe514608f578063f887ea4014608f575b600080fd5b606673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b606673fd10276d98f303f60f951e3ff2ef5213b93491528156fea164736f6c6343000807000a";

type EklipseHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EklipseHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EklipseHelper__factory extends ContractFactory {
  constructor(...args: EklipseHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EklipseHelper> {
    return super.deploy(overrides || {}) as Promise<EklipseHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EklipseHelper {
    return super.attach(address) as EklipseHelper;
  }
  override connect(signer: Signer): EklipseHelper__factory {
    return super.connect(signer) as EklipseHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EklipseHelperInterface {
    return new utils.Interface(_abi) as EklipseHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EklipseHelper {
    return new Contract(address, _abi, signerOrProvider) as EklipseHelper;
  }
}
