/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Multicall2,
  Multicall2Interface,
} from "../../../contracts/libraries/Multicall2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610174578063c3077fa914610194578063ee82ac5e146101a757600080fd5b806372425d9d1461015a57806386d516e814610160578063a8b0574e1461016657600080fd5b8063399542e9116100b2578063399542e91461011757806342cbb15c146101395780634d2301cc1461013f57600080fd5b80630f28c97d146100d9578063252dba42146100ee57806327e86d6e1461010f575b600080fd5b425b6040519081526020015b60405180910390f35b6101016100fc36600461070a565b6101b9565b6040516100e59291906107a3565b6100db610341565b61012a61012536600461080d565b610354565b6040516100e5939291906108ca565b436100db565b6100db61014d3660046108f2565b6001600160a01b03163190565b446100db565b456100db565b6040514181526020016100e5565b61018761018236600461080d565b61036c565b6040516100e59190610914565b61012a6101a236600461070a565b610526565b6100db6101b5366004610927565b4090565b8051439060609067ffffffffffffffff8111156101d8576101d8610543565b60405190808252806020026020018201604052801561020b57816020015b60608152602001906001900390816101f65790505b50905060005b835181101561033b5760008085838151811061022f5761022f610940565b6020026020010151600001516001600160a01b031686848151811061025657610256610940565b60200260200101516020015160405161026f9190610956565b6000604051808303816000865af19150503d80600081146102ac576040519150601f19603f3d011682016040523d82523d6000602084013e6102b1565b606091505b5091509150816103085760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b8084848151811061031b5761031b610940565b60200260200101819052505050808061033390610988565b915050610211565b50915091565b600061034e6001436109a1565b40905090565b4380406060610363858561036c565b90509250925092565b6060815167ffffffffffffffff81111561038857610388610543565b6040519080825280602002602001820160405280156103ce57816020015b6040805180820190915260008152606060208201528152602001906001900390816103a65790505b50905060005b825181101561051f576000808483815181106103f2576103f2610940565b6020026020010151600001516001600160a01b031685848151811061041957610419610940565b6020026020010151602001516040516104329190610956565b6000604051808303816000865af19150503d806000811461046f576040519150601f19603f3d011682016040523d82523d6000602084013e610474565b606091505b509150915085156104d657816104d65760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b60648201526084016102ff565b60405180604001604052808315158152602001828152508484815181106104ff576104ff610940565b60200260200101819052505050808061051790610988565b9150506103d4565b5092915050565b6000806060610536600185610354565b9196909550909350915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561057c5761057c610543565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105ab576105ab610543565b604052919050565b80356001600160a01b03811681146105ca57600080fd5b919050565b6000601f83818401126105e157600080fd5b8235602067ffffffffffffffff808311156105fe576105fe610543565b8260051b61060d838201610582565b938452868101830193838101908986111561062757600080fd5b84890192505b858310156106fd578235848111156106455760008081fd5b89016040601f19828d03810182131561065e5760008081fd5b610666610559565b6106718985016105b3565b815282840135888111156106855760008081fd5b8085019450508d603f85011261069b5760008081fd5b88840135888111156106af576106af610543565b6106be8a848e84011601610582565b92508083528e848287010111156106d55760008081fd5b808486018b85013760009083018a01528089019190915284525050918401919084019061062d565b9998505050505050505050565b60006020828403121561071c57600080fd5b813567ffffffffffffffff81111561073357600080fd5b61073f848285016105cf565b949350505050565b60005b8381101561076257818101518382015260200161074a565b83811115610771576000848401525b50505050565b6000815180845261078f816020860160208601610747565b601f01601f19169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156107ff57605f198887030184526107ed868351610777565b955092840192908401906001016107d1565b509398975050505050505050565b6000806040838503121561082057600080fd5b8235801515811461083057600080fd5b9150602083013567ffffffffffffffff81111561084c57600080fd5b610858858286016105cf565b9150509250929050565b6000815180845260208085019450848260051b860182860160005b858110156108bd578383038952815180511515845285015160408685018190526108a981860183610777565b9a87019a945050509084019060010161087d565b5090979650505050505050565b8381528260208201526060604082015260006108e96060830184610862565b95945050505050565b60006020828403121561090457600080fd5b61090d826105b3565b9392505050565b60208152600061090d6020830184610862565b60006020828403121561093957600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60008251610968818460208701610747565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60006001820161099a5761099a610972565b5060010190565b6000828210156109b3576109b3610972565b50039056fea164736f6c634300080d000a";

type Multicall2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall2__factory extends ContractFactory {
  constructor(...args: Multicall2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall2> {
    return super.deploy(overrides || {}) as Promise<Multicall2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall2 {
    return super.attach(address) as Multicall2;
  }
  override connect(signer: Signer): Multicall2__factory {
    return super.connect(signer) as Multicall2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall2Interface {
    return new utils.Interface(_abi) as Multicall2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall2 {
    return new Contract(address, _abi, signerOrProvider) as Multicall2;
  }
}
