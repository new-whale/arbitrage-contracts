/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAggregationExecutor,
  IAggregationExecutorInterface,
} from "../../../contracts/interface/IAggregationExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "srcSpender",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "part",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "parts",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "dexType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "dexId",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiAMM.Swap[][]",
        name: "swapSequences",
        type: "tuple[][]",
      },
    ],
    name: "batchSwapExactIn",
    outputs: [
      {
        internalType: "uint256",
        name: "totalAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "srcSpender",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "part",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "parts",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "dexType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "dexId",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultiAMM.Swap[][][]",
        name: "swapSequences",
        type: "tuple[][][]",
      },
    ],
    name: "batchSwapExactInBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "totalAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "mode",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "srcSpender",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "callBytes",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllDexTypeAddrs",
    outputs: [
      {
        internalType: "address[][]",
        name: "dexes",
        type: "address[][]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "dexType",
        type: "uint8",
      },
    ],
    name: "getDexTypeAddrs",
    outputs: [
      {
        internalType: "address[]",
        name: "dexes",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IAggregationExecutor__factory {
  static readonly abi = _abi;
  static createInterface(): IAggregationExecutorInterface {
    return new utils.Interface(_abi) as IAggregationExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAggregationExecutor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IAggregationExecutor;
  }
}
