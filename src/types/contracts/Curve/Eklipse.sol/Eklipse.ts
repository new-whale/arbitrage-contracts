/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IViewer {
  export type ICurveViewerStruct = {
    poolType: BigNumberish;
    A: BigNumberish;
    totalSupply: BigNumberish;
    tokenBalances: BigNumberish[];
    pool: string;
    tokenList: string[];
    fees: BigNumberish[];
    decimals: BigNumberish;
    name: string;
    symbol: string;
  };

  export type ICurveViewerStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    string,
    string[],
    BigNumber[],
    number,
    string,
    string
  ] & {
    poolType: BigNumber;
    A: BigNumber;
    totalSupply: BigNumber;
    tokenBalances: BigNumber[];
    pool: string;
    tokenList: string[];
    fees: BigNumber[];
    decimals: number;
    name: string;
    symbol: string;
  };

  export type ITokenViewerStruct = {
    token: string;
    decimals: BigNumberish;
    name: string;
    symbol: string;
  };

  export type ITokenViewerStructOutput = [string, number, string, string] & {
    token: string;
    decimals: number;
    name: string;
    symbol: string;
  };
}

export interface EklipseInterface extends utils.Interface {
  functions: {
    "AOfPool(address)": FunctionFragment;
    "AOfPools()": FunctionFragment;
    "WKLAY()": FunctionFragment;
    "addLiquidity(address,address[],uint256[],uint256)": FunctionFragment;
    "addLiquidityKLAY(address,address[],uint256[],uint256)": FunctionFragment;
    "addPool(address,address)": FunctionFragment;
    "addPools(address[],address[])": FunctionFragment;
    "getDy(address[],uint256)": FunctionFragment;
    "getDyWithoutFee(address[],uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pool(uint256)": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "poolInfos()": FunctionFragment;
    "poolNum()": FunctionFragment;
    "pools()": FunctionFragment;
    "pullOwnership()": FunctionFragment;
    "pushOwnership(address)": FunctionFragment;
    "removeLiquidity(address,uint256,address[],uint256[])": FunctionFragment;
    "removeLiquidityOneToken(address,uint256,address,uint256)": FunctionFragment;
    "removePool(uint256)": FunctionFragment;
    "removePools(uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setPoolTypes(address[],uint64[])": FunctionFragment;
    "setWKLAY(address)": FunctionFragment;
    "swapWithPath(address[],uint256,uint256)": FunctionFragment;
    "tokenInfo(address)": FunctionFragment;
    "tokenInfos()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AOfPool"
      | "AOfPools"
      | "WKLAY"
      | "addLiquidity"
      | "addLiquidityKLAY"
      | "addPool"
      | "addPools"
      | "getDy"
      | "getDyWithoutFee"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "pool"
      | "poolInfo"
      | "poolInfos"
      | "poolNum"
      | "pools"
      | "pullOwnership"
      | "pushOwnership"
      | "removeLiquidity"
      | "removeLiquidityOneToken"
      | "removePool"
      | "removePools"
      | "renounceOwnership"
      | "router"
      | "setPoolTypes"
      | "setWKLAY"
      | "swapWithPath"
      | "tokenInfo"
      | "tokenInfos"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AOfPool", values: [string]): string;
  encodeFunctionData(functionFragment: "AOfPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "WKLAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityKLAY",
    values: [string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPools",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDy",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDyWithoutFee",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "poolInfos", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolNum", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityOneToken",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPoolTypes",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setWKLAY", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapWithPath",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "AOfPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "AOfPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WKLAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityKLAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDyWithoutFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWKLAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapWithPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PushedOwnership(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushedOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PushedOwnershipEventObject {
  candidateOwner: string;
}
export type PushedOwnershipEvent = TypedEvent<
  [string],
  PushedOwnershipEventObject
>;

export type PushedOwnershipEventFilter = TypedEventFilter<PushedOwnershipEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Eklipse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EklipseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AOfPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { A: BigNumber }>;

    AOfPools(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { A: BigNumber[] }>;

    WKLAY(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityKLAY(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPool(
      _pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPools(
      _pools_: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDy(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getDyWithoutFee(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pool(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { poolAddr: string; tokenAddr: string }>;

    poolInfo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[IViewer.ICurveViewerStructOutput]>;

    poolInfos(
      overrides?: CallOverrides
    ): Promise<[IViewer.ICurveViewerStructOutput[], BigNumber]>;

    poolNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    pools(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { poolAddrs: string[]; tokenAddrs: string[] }
    >;

    pullOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      lpContract: string,
      _amount: BigNumberish,
      coins: string[],
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityOneToken(
      lpContract: string,
      _amount: BigNumberish,
      coin: string,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePool(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePools(
      idxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setPoolTypes(
      poolAddrs: string[],
      types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWKLAY(
      newWKLAY: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapWithPath(
      _path: string[],
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<[IViewer.ITokenViewerStructOutput]>;

    tokenInfos(
      overrides?: CallOverrides
    ): Promise<[IViewer.ITokenViewerStructOutput[]]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AOfPool(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  AOfPools(overrides?: CallOverrides): Promise<BigNumber[]>;

  WKLAY(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    lpContract: string,
    coins: string[],
    amounts: BigNumberish[],
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityKLAY(
    lpContract: string,
    coins: string[],
    amounts: BigNumberish[],
    minAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPool(
    _pool: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPools(
    _pools_: string[],
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDy(
    _path: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getDyWithoutFee(
    _path: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pool(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { poolAddr: string; tokenAddr: string }>;

  poolInfo(
    pool: string,
    overrides?: CallOverrides
  ): Promise<IViewer.ICurveViewerStructOutput>;

  poolInfos(
    overrides?: CallOverrides
  ): Promise<[IViewer.ICurveViewerStructOutput[], BigNumber]>;

  poolNum(overrides?: CallOverrides): Promise<BigNumber>;

  pools(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & { poolAddrs: string[]; tokenAddrs: string[] }
  >;

  pullOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    lpContract: string,
    _amount: BigNumberish,
    coins: string[],
    minAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityOneToken(
    lpContract: string,
    _amount: BigNumberish,
    coin: string,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePool(
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePools(
    idxes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setPoolTypes(
    poolAddrs: string[],
    types: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWKLAY(
    newWKLAY: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapWithPath(
    _path: string[],
    _amount: BigNumberish,
    _minAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenInfo(
    token: string,
    overrides?: CallOverrides
  ): Promise<IViewer.ITokenViewerStructOutput>;

  tokenInfos(
    overrides?: CallOverrides
  ): Promise<IViewer.ITokenViewerStructOutput[]>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AOfPool(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    AOfPools(overrides?: CallOverrides): Promise<BigNumber[]>;

    WKLAY(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityKLAY(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPool(
      _pool: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPools(
      _pools_: string[],
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getDy(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getDyWithoutFee(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pool(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { poolAddr: string; tokenAddr: string }>;

    poolInfo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<IViewer.ICurveViewerStructOutput>;

    poolInfos(
      overrides?: CallOverrides
    ): Promise<[IViewer.ICurveViewerStructOutput[], BigNumber]>;

    poolNum(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { poolAddrs: string[]; tokenAddrs: string[] }
    >;

    pullOwnership(overrides?: CallOverrides): Promise<void>;

    pushOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    removeLiquidity(
      lpContract: string,
      _amount: BigNumberish,
      coins: string[],
      minAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeLiquidityOneToken(
      lpContract: string,
      _amount: BigNumberish,
      coin: string,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePool(idx: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removePools(
      idxes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setPoolTypes(
      poolAddrs: string[],
      types: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setWKLAY(newWKLAY: string, overrides?: CallOverrides): Promise<void>;

    swapWithPath(
      _path: string[],
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<IViewer.ITokenViewerStructOutput>;

    tokenInfos(
      overrides?: CallOverrides
    ): Promise<IViewer.ITokenViewerStructOutput[]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PushedOwnership(address)"(
      candidateOwner?: string | null
    ): PushedOwnershipEventFilter;
    PushedOwnership(candidateOwner?: string | null): PushedOwnershipEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    AOfPool(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    AOfPools(overrides?: CallOverrides): Promise<BigNumber>;

    WKLAY(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityKLAY(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPool(
      _pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPools(
      _pools_: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDy(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDyWithoutFee(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pool(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfos(overrides?: CallOverrides): Promise<BigNumber>;

    poolNum(overrides?: CallOverrides): Promise<BigNumber>;

    pools(overrides?: CallOverrides): Promise<BigNumber>;

    pullOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      lpContract: string,
      _amount: BigNumberish,
      coins: string[],
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      lpContract: string,
      _amount: BigNumberish,
      coin: string,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePool(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePools(
      idxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setPoolTypes(
      poolAddrs: string[],
      types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWKLAY(
      newWKLAY: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapWithPath(
      _path: string[],
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenInfo(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenInfos(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AOfPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AOfPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WKLAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityKLAY(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPool(
      _pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPools(
      _pools_: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDy(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDyWithoutFee(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      lpContract: string,
      _amount: BigNumberish,
      coins: string[],
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityOneToken(
      lpContract: string,
      _amount: BigNumberish,
      coin: string,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePool(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePools(
      idxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPoolTypes(
      poolAddrs: string[],
      types: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWKLAY(
      newWKLAY: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapWithPath(
      _path: string[],
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
