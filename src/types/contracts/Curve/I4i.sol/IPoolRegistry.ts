/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IPoolRegistry {
  export type PoolInfoStruct = {
    index: BigNumberish;
    nCoins: BigNumberish;
    poolType: BigNumberish;
    decimals: BigNumberish;
    coins: string[];
    name: string;
  };

  export type PoolInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    string
  ] & {
    index: BigNumber;
    nCoins: BigNumber;
    poolType: BigNumber;
    decimals: BigNumber;
    coins: string[];
    name: string;
  };
}

export interface IPoolRegistryInterface extends utils.Interface {
  functions: {
    "findPoolForCoins(address,address,uint256)": FunctionFragment;
    "getAllPoolInfos()": FunctionFragment;
    "getCoinList()": FunctionFragment;
    "getLpToken(address)": FunctionFragment;
    "getPoolInfo(address)": FunctionFragment;
    "poolCount()": FunctionFragment;
    "poolList(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "findPoolForCoins"
      | "getAllPoolInfos"
      | "getCoinList"
      | "getLpToken"
      | "getPoolInfo"
      | "poolCount"
      | "poolList"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "findPoolForCoins",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPoolInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoinList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLpToken", values: [string]): string;
  encodeFunctionData(functionFragment: "getPoolInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolList",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "findPoolForCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPoolInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoinList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolList", data: BytesLike): Result;

  events: {};
}

export interface IPoolRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    findPoolForCoins(
      _from: string,
      _to: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllPoolInfos(
      overrides?: CallOverrides
    ): Promise<[string[], IPoolRegistry.PoolInfoStructOutput[]]>;

    getCoinList(overrides?: CallOverrides): Promise<[string[]]>;

    getLpToken(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getPoolInfo(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[IPoolRegistry.PoolInfoStructOutput]>;

    poolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  findPoolForCoins(
    _from: string,
    _to: string,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllPoolInfos(
    overrides?: CallOverrides
  ): Promise<[string[], IPoolRegistry.PoolInfoStructOutput[]]>;

  getCoinList(overrides?: CallOverrides): Promise<string[]>;

  getLpToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  getPoolInfo(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<IPoolRegistry.PoolInfoStructOutput>;

  poolCount(overrides?: CallOverrides): Promise<BigNumber>;

  poolList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    findPoolForCoins(
      _from: string,
      _to: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllPoolInfos(
      overrides?: CallOverrides
    ): Promise<[string[], IPoolRegistry.PoolInfoStructOutput[]]>;

    getCoinList(overrides?: CallOverrides): Promise<string[]>;

    getLpToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    getPoolInfo(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<IPoolRegistry.PoolInfoStructOutput>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    poolList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    findPoolForCoins(
      _from: string,
      _to: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPoolInfos(overrides?: CallOverrides): Promise<BigNumber>;

    getCoinList(overrides?: CallOverrides): Promise<BigNumber>;

    getLpToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    poolList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    findPoolForCoins(
      _from: string,
      _to: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPoolInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCoinList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLpToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
