/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IMultiAMM {
  export type SwapStruct = {
    part: BigNumberish;
    parts: BigNumberish;
    dexType: BigNumberish;
    dexId: BigNumberish;
    data: BytesLike;
  };

  export type SwapStructOutput = [number, number, number, number, string] & {
    part: number;
    parts: number;
    dexType: number;
    dexId: number;
    data: string;
  };
}

export declare namespace IEisenMultihopRouter {
  export type DexTypesStruct = { dexes: string[]; dexType: BigNumberish };

  export type DexTypesStructOutput = [string[], number] & {
    dexes: string[];
    dexType: number;
  };
}

export interface IEisenMultihopRouterInterface extends utils.Interface {
  functions: {
    "addDex(address,uint8)": FunctionFragment;
    "addDexes(address[],uint8[])": FunctionFragment;
    "calAndExecuteSingleSwapExactIn((uint8,uint8,uint8,uint8,bytes)[],address,uint256)": FunctionFragment;
    "calMultihopBatchSwapExactIn(address,address,uint256,tuple[][])": FunctionFragment;
    "calSingleSwapExactIn((uint8,uint8,uint8,uint8,bytes)[])": FunctionFragment;
    "calbatchSwapExactInBlock(address,address,uint256,tuple[][][])": FunctionFragment;
    "executeSingleSwapExactIn((uint8,uint8,uint8,uint8,bytes)[],address,address,uint256)": FunctionFragment;
    "getDexes(uint8)": FunctionFragment;
    "getDexesAll()": FunctionFragment;
    "removeDex(address)": FunctionFragment;
    "removeDexes(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDex"
      | "addDexes"
      | "calAndExecuteSingleSwapExactIn"
      | "calMultihopBatchSwapExactIn"
      | "calSingleSwapExactIn"
      | "calbatchSwapExactInBlock"
      | "executeSingleSwapExactIn"
      | "getDexes"
      | "getDexesAll"
      | "removeDex"
      | "removeDexes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDexes",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calAndExecuteSingleSwapExactIn",
    values: [IMultiAMM.SwapStruct[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calMultihopBatchSwapExactIn",
    values: [string, string, BigNumberish, IMultiAMM.SwapStruct[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "calSingleSwapExactIn",
    values: [IMultiAMM.SwapStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calbatchSwapExactInBlock",
    values: [string, string, BigNumberish, IMultiAMM.SwapStruct[][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSingleSwapExactIn",
    values: [IMultiAMM.SwapStruct[], string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexesAll",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeDex", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeDexes",
    values: [string[]]
  ): string;

  decodeFunctionResult(functionFragment: "addDex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calAndExecuteSingleSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calMultihopBatchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calSingleSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calbatchSwapExactInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSingleSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDexesAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeDex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDexes",
    data: BytesLike
  ): Result;

  events: {
    "Exchange(address,uint256,address)": EventFragment;
    "LogFee(uint256,address)": EventFragment;
    "Profit(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Exchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Profit"): EventFragment;
}

export interface ExchangeEventObject {
  pair: string;
  amountOut: BigNumber;
  output: string;
}
export type ExchangeEvent = TypedEvent<
  [string, BigNumber, string],
  ExchangeEventObject
>;

export type ExchangeEventFilter = TypedEventFilter<ExchangeEvent>;

export interface LogFeeEventObject {
  fee: BigNumber;
  output: string;
}
export type LogFeeEvent = TypedEvent<[BigNumber, string], LogFeeEventObject>;

export type LogFeeEventFilter = TypedEventFilter<LogFeeEvent>;

export interface ProfitEventObject {
  profit: BigNumber;
}
export type ProfitEvent = TypedEvent<[BigNumber], ProfitEventObject>;

export type ProfitEventFilter = TypedEventFilter<ProfitEvent>;

export interface IEisenMultihopRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEisenMultihopRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDex(
      dex: string,
      dexType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDexes(
      dexes: string[],
      dexTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calAndExecuteSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calMultihopBatchSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAmountOut: BigNumber }>;

    calSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    calbatchSwapExactInBlock(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAmountOut: BigNumber }>;

    executeSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDexes(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { dexes: string[] }>;

    getDexesAll(
      overrides?: CallOverrides
    ): Promise<
      [IEisenMultihopRouter.DexTypesStructOutput[]] & {
        dexes: IEisenMultihopRouter.DexTypesStructOutput[];
      }
    >;

    removeDex(
      dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDexes(
      dexes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDex(
    dex: string,
    dexType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDexes(
    dexes: string[],
    dexTypes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calAndExecuteSingleSwapExactIn(
    swapSequences: IMultiAMM.SwapStruct[],
    tokenIn: string,
    amountIn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calMultihopBatchSwapExactIn(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    swapSequences: IMultiAMM.SwapStruct[][],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calSingleSwapExactIn(
    swapSequences: IMultiAMM.SwapStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calbatchSwapExactInBlock(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    swapSequences: IMultiAMM.SwapStruct[][][],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeSingleSwapExactIn(
    swapSequences: IMultiAMM.SwapStruct[],
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDexes(i: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  getDexesAll(
    overrides?: CallOverrides
  ): Promise<IEisenMultihopRouter.DexTypesStructOutput[]>;

  removeDex(
    dex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDexes(
    dexes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDex(
      dex: string,
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addDexes(
      dexes: string[],
      dexTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    calAndExecuteSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calMultihopBatchSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calbatchSwapExactInBlock(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDexes(i: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    getDexesAll(
      overrides?: CallOverrides
    ): Promise<IEisenMultihopRouter.DexTypesStructOutput[]>;

    removeDex(dex: string, overrides?: CallOverrides): Promise<void>;

    removeDexes(dexes: string[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Exchange(address,uint256,address)"(
      pair?: null,
      amountOut?: null,
      output?: null
    ): ExchangeEventFilter;
    Exchange(pair?: null, amountOut?: null, output?: null): ExchangeEventFilter;

    "LogFee(uint256,address)"(fee?: null, output?: null): LogFeeEventFilter;
    LogFee(fee?: null, output?: null): LogFeeEventFilter;

    "Profit(uint256)"(profit?: null): ProfitEventFilter;
    Profit(profit?: null): ProfitEventFilter;
  };

  estimateGas: {
    addDex(
      dex: string,
      dexType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDexes(
      dexes: string[],
      dexTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calAndExecuteSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calMultihopBatchSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calbatchSwapExactInBlock(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDexes(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDexesAll(overrides?: CallOverrides): Promise<BigNumber>;

    removeDex(
      dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDexes(
      dexes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDex(
      dex: string,
      dexType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDexes(
      dexes: string[],
      dexTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calAndExecuteSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calMultihopBatchSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calbatchSwapExactInBlock(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDexes(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexesAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeDex(
      dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDexes(
      dexes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
