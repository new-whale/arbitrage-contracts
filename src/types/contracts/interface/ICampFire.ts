/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IAggregationRouterV1 {
  export type SwapBytesStruct = {
    data: BytesLike;
    logicData: BytesLike;
    compareData: BytesLike;
    feeData: BytesLike;
  };

  export type SwapBytesStructOutput = [string, string, string, string] & {
    data: string;
    logicData: string;
    compareData: string;
    feeData: string;
  };
}

export interface ICampFireInterface extends utils.Interface {
  functions: {
    "burnWoods(address,uint256,bool,(bytes,bytes,bytes,bytes))": FunctionFragment;
    "claimIZN(address)": FunctionFragment;
    "countWoods()": FunctionFragment;
    "pendingIZN(address)": FunctionFragment;
    "supplyAmount(address)": FunctionFragment;
    "supplyWoods(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burnWoods"
      | "claimIZN"
      | "countWoods"
      | "pendingIZN"
      | "supplyAmount"
      | "supplyWoods"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burnWoods",
    values: [
      string,
      BigNumberish,
      boolean,
      IAggregationRouterV1.SwapBytesStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "claimIZN", values: [string]): string;
  encodeFunctionData(
    functionFragment: "countWoods",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pendingIZN", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supplyAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyWoods",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burnWoods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimIZN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "countWoods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingIZN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyWoods",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICampFire extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICampFireInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnWoods(
      caller: string,
      isBlock: BigNumberish,
      isProfitFee: boolean,
      swapBytes: IAggregationRouterV1.SwapBytesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimIZN(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countWoods(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalWoods: BigNumber }>;

    pendingIZN(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { campFireIdx: number; pending: BigNumber }
    >;

    supplyAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { userWoodsAmount: BigNumber }>;

    supplyWoods(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnWoods(
    caller: string,
    isBlock: BigNumberish,
    isProfitFee: boolean,
    swapBytes: IAggregationRouterV1.SwapBytesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimIZN(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countWoods(overrides?: CallOverrides): Promise<BigNumber>;

  pendingIZN(
    user: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { campFireIdx: number; pending: BigNumber }>;

  supplyAmount(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  supplyWoods(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnWoods(
      caller: string,
      isBlock: BigNumberish,
      isProfitFee: boolean,
      swapBytes: IAggregationRouterV1.SwapBytesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimIZN(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    countWoods(overrides?: CallOverrides): Promise<BigNumber>;

    pendingIZN(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { campFireIdx: number; pending: BigNumber }
    >;

    supplyAmount(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    supplyWoods(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    burnWoods(
      caller: string,
      isBlock: BigNumberish,
      isProfitFee: boolean,
      swapBytes: IAggregationRouterV1.SwapBytesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimIZN(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countWoods(overrides?: CallOverrides): Promise<BigNumber>;

    pendingIZN(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    supplyAmount(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    supplyWoods(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnWoods(
      caller: string,
      isBlock: BigNumberish,
      isProfitFee: boolean,
      swapBytes: IAggregationRouterV1.SwapBytesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimIZN(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countWoods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingIZN(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplyAmount(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplyWoods(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
