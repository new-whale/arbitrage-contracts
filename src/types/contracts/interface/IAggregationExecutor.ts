/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IMultiAMM {
  export type SwapStruct = {
    part: BigNumberish;
    parts: BigNumberish;
    dexType: BigNumberish;
    dexId: BigNumberish;
    data: BytesLike;
  };

  export type SwapStructOutput = [number, number, number, number, string] & {
    part: number;
    parts: number;
    dexType: number;
    dexId: number;
    data: string;
  };
}

export interface IAggregationExecutorInterface extends utils.Interface {
  functions: {
    "batchSwapExactIn(address,address,address,address,uint256,tuple[][])": FunctionFragment;
    "batchSwapExactInBlock(address,address,address,address,uint256,tuple[][][])": FunctionFragment;
    "callBytes(uint256,address,bytes)": FunctionFragment;
    "getAllDexTypeAddrs()": FunctionFragment;
    "getDexTypeAddrs(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchSwapExactIn"
      | "batchSwapExactInBlock"
      | "callBytes"
      | "getAllDexTypeAddrs"
      | "getDexTypeAddrs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchSwapExactIn",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      IMultiAMM.SwapStruct[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactInBlock",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      IMultiAMM.SwapStruct[][][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callBytes",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDexTypeAddrs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDexTypeAddrs",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllDexTypeAddrs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexTypeAddrs",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAggregationExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAggregationExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchSwapExactIn(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactInBlock(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callBytes(
      mode: BigNumberish,
      srcSpender: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllDexTypeAddrs(
      overrides?: CallOverrides
    ): Promise<[string[][]] & { dexes: string[][] }>;

    getDexTypeAddrs(
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { dexes: string[] }>;
  };

  batchSwapExactIn(
    srcSpender: string,
    to: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    swapSequences: IMultiAMM.SwapStruct[][],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactInBlock(
    srcSpender: string,
    to: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    swapSequences: IMultiAMM.SwapStruct[][][],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callBytes(
    mode: BigNumberish,
    srcSpender: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllDexTypeAddrs(overrides?: CallOverrides): Promise<string[][]>;

  getDexTypeAddrs(
    dexType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    batchSwapExactIn(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapExactInBlock(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callBytes(
      mode: BigNumberish,
      srcSpender: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllDexTypeAddrs(overrides?: CallOverrides): Promise<string[][]>;

    getDexTypeAddrs(
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    batchSwapExactIn(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapExactInBlock(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callBytes(
      mode: BigNumberish,
      srcSpender: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllDexTypeAddrs(overrides?: CallOverrides): Promise<BigNumber>;

    getDexTypeAddrs(
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchSwapExactIn(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactInBlock(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callBytes(
      mode: BigNumberish,
      srcSpender: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllDexTypeAddrs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexTypeAddrs(
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
