/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ICurveInterface extends utils.Interface {
  functions: {
    "AOfPool(address)": FunctionFragment;
    "AOfPools()": FunctionFragment;
    "WKLAY()": FunctionFragment;
    "addLiquidity(address,address[],uint256[],uint256)": FunctionFragment;
    "addLiquidityKLAY(address,address[],uint256[],uint256)": FunctionFragment;
    "addPool(address,address)": FunctionFragment;
    "addPools(address[],address[])": FunctionFragment;
    "getDy(address[],uint256)": FunctionFragment;
    "getDyWithoutFee(address[],uint256)": FunctionFragment;
    "pool(uint256)": FunctionFragment;
    "poolNum()": FunctionFragment;
    "pools()": FunctionFragment;
    "removeLiquidity(address,uint256,address[],uint256[])": FunctionFragment;
    "removeLiquidityOneToken(address,uint256,address,uint256)": FunctionFragment;
    "removePool(uint256)": FunctionFragment;
    "removePools(uint256[])": FunctionFragment;
    "swapWithPath(address[],uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AOfPool"
      | "AOfPools"
      | "WKLAY"
      | "addLiquidity"
      | "addLiquidityKLAY"
      | "addPool"
      | "addPools"
      | "getDy"
      | "getDyWithoutFee"
      | "pool"
      | "poolNum"
      | "pools"
      | "removeLiquidity"
      | "removeLiquidityOneToken"
      | "removePool"
      | "removePools"
      | "swapWithPath"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AOfPool", values: [string]): string;
  encodeFunctionData(functionFragment: "AOfPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "WKLAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityKLAY",
    values: [string, string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPools",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDy",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDyWithoutFee",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pool", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "poolNum", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityOneToken",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapWithPath",
    values: [string[], BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AOfPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "AOfPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WKLAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityKLAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDyWithoutFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapWithPath",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICurve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AOfPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { A: BigNumber }>;

    AOfPools(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { A: BigNumber[] }>;

    WKLAY(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityKLAY(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPool(
      _pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPools(
      _pools_: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDy(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getDyWithoutFee(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    pool(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { poolAddr: string; tokenAddr: string }>;

    poolNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    pools(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { poolAddrs: string[]; tokenAddrs: string[] }
    >;

    removeLiquidity(
      lpContract: string,
      _amount: BigNumberish,
      coins: string[],
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityOneToken(
      lpContract: string,
      _amount: BigNumberish,
      coin: string,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePool(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePools(
      idxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapWithPath(
      _path: string[],
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AOfPool(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  AOfPools(overrides?: CallOverrides): Promise<BigNumber[]>;

  WKLAY(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    lpContract: string,
    coins: string[],
    amounts: BigNumberish[],
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityKLAY(
    lpContract: string,
    coins: string[],
    amounts: BigNumberish[],
    minAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPool(
    _pool: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPools(
    _pools_: string[],
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDy(
    _path: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getDyWithoutFee(
    _path: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  pool(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { poolAddr: string; tokenAddr: string }>;

  poolNum(overrides?: CallOverrides): Promise<BigNumber>;

  pools(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & { poolAddrs: string[]; tokenAddrs: string[] }
  >;

  removeLiquidity(
    lpContract: string,
    _amount: BigNumberish,
    coins: string[],
    minAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityOneToken(
    lpContract: string,
    _amount: BigNumberish,
    coin: string,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePool(
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePools(
    idxes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapWithPath(
    _path: string[],
    _amount: BigNumberish,
    _minAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AOfPool(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    AOfPools(overrides?: CallOverrides): Promise<BigNumber[]>;

    WKLAY(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityKLAY(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPool(
      _pool: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPools(
      _pools_: string[],
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getDy(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getDyWithoutFee(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    pool(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { poolAddr: string; tokenAddr: string }>;

    poolNum(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { poolAddrs: string[]; tokenAddrs: string[] }
    >;

    removeLiquidity(
      lpContract: string,
      _amount: BigNumberish,
      coins: string[],
      minAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeLiquidityOneToken(
      lpContract: string,
      _amount: BigNumberish,
      coin: string,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePool(idx: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removePools(
      idxes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapWithPath(
      _path: string[],
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    AOfPool(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    AOfPools(overrides?: CallOverrides): Promise<BigNumber>;

    WKLAY(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityKLAY(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPool(
      _pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPools(
      _pools_: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDy(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDyWithoutFee(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolNum(overrides?: CallOverrides): Promise<BigNumber>;

    pools(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      lpContract: string,
      _amount: BigNumberish,
      coins: string[],
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      lpContract: string,
      _amount: BigNumberish,
      coin: string,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePool(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePools(
      idxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapWithPath(
      _path: string[],
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AOfPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AOfPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WKLAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityKLAY(
      lpContract: string,
      coins: string[],
      amounts: BigNumberish[],
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPool(
      _pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPools(
      _pools_: string[],
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDy(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDyWithoutFee(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      lpContract: string,
      _amount: BigNumberish,
      coins: string[],
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityOneToken(
      lpContract: string,
      _amount: BigNumberish,
      coin: string,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePool(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePools(
      idxes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapWithPath(
      _path: string[],
      _amount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
