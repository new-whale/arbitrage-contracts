/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IMultiAMM {
  export type SwapStruct = {
    part: BigNumberish;
    parts: BigNumberish;
    dexType: BigNumberish;
    dexId: BigNumberish;
    data: BytesLike;
  };

  export type SwapStructOutput = [number, number, number, number, string] & {
    part: number;
    parts: number;
    dexType: number;
    dexId: number;
    data: string;
  };
}

export declare namespace IEisenMultihopRouter {
  export type DexTypesStruct = { dexes: string[]; dexType: BigNumberish };

  export type DexTypesStructOutput = [string[], number] & {
    dexes: string[];
    dexType: number;
  };
}

export interface AggregationExecutorInterface extends utils.Interface {
  functions: {
    "addDex(address,uint8)": FunctionFragment;
    "addDexes(address[],uint8[])": FunctionFragment;
    "batchSwapExactIn(address,address,address,address,uint256,tuple[][])": FunctionFragment;
    "batchSwapExactInBlock(address,address,address,address,uint256,tuple[][][])": FunctionFragment;
    "calAndExecuteSingleSwapExactIn((uint8,uint8,uint8,uint8,bytes)[],address,uint256)": FunctionFragment;
    "calMultihopBatchSwapExactIn(address,address,uint256,tuple[][])": FunctionFragment;
    "calSingleSwapExactIn((uint8,uint8,uint8,uint8,bytes)[])": FunctionFragment;
    "calbatchSwapExactInBlock(address,address,uint256,tuple[][][])": FunctionFragment;
    "callBytes(uint256,address,bytes)": FunctionFragment;
    "delValidAddr(address)": FunctionFragment;
    "devAddr()": FunctionFragment;
    "executeSingleSwapExactIn((uint8,uint8,uint8,uint8,bytes)[],address,address,uint256)": FunctionFragment;
    "getAllDexTypeAddrs()": FunctionFragment;
    "getDexTypeAddrs(uint8)": FunctionFragment;
    "getDexes(uint8)": FunctionFragment;
    "getDexesAll()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pullOwnership()": FunctionFragment;
    "pushOwnership(address)": FunctionFragment;
    "removeDex(address)": FunctionFragment;
    "removeDexes(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueFunds(address,uint256)": FunctionFragment;
    "setValidAddr(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "typeNum()": FunctionFragment;
    "userBuybackAddr()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDex"
      | "addDexes"
      | "batchSwapExactIn"
      | "batchSwapExactInBlock"
      | "calAndExecuteSingleSwapExactIn"
      | "calMultihopBatchSwapExactIn"
      | "calSingleSwapExactIn"
      | "calbatchSwapExactInBlock"
      | "callBytes"
      | "delValidAddr"
      | "devAddr"
      | "executeSingleSwapExactIn"
      | "getAllDexTypeAddrs"
      | "getDexTypeAddrs"
      | "getDexes"
      | "getDexesAll"
      | "owner"
      | "paused"
      | "pendingOwner"
      | "pullOwnership"
      | "pushOwnership"
      | "removeDex"
      | "removeDexes"
      | "renounceOwnership"
      | "rescueFunds"
      | "setValidAddr"
      | "transferOwnership"
      | "typeNum"
      | "userBuybackAddr"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDexes",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactIn",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      IMultiAMM.SwapStruct[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactInBlock",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      IMultiAMM.SwapStruct[][][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calAndExecuteSingleSwapExactIn",
    values: [IMultiAMM.SwapStruct[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calMultihopBatchSwapExactIn",
    values: [string, string, BigNumberish, IMultiAMM.SwapStruct[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "calSingleSwapExactIn",
    values: [IMultiAMM.SwapStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calbatchSwapExactInBlock",
    values: [string, string, BigNumberish, IMultiAMM.SwapStruct[][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "callBytes",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delValidAddr",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "devAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeSingleSwapExactIn",
    values: [IMultiAMM.SwapStruct[], string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDexTypeAddrs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDexTypeAddrs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDexesAll",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "removeDex", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeDexes",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFunds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "typeNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBuybackAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addDex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calAndExecuteSingleSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calMultihopBatchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calSingleSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calbatchSwapExactInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delValidAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeSingleSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDexTypeAddrs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDexTypeAddrs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDexesAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeDex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBuybackAddr",
    data: BytesLike
  ): Result;

  events: {
    "Exchange(address,uint256,address)": EventFragment;
    "FeeChanged(uint256,uint256)": EventFragment;
    "LogFee(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Profit(uint256)": EventFragment;
    "PushedOwnership(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Exchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Profit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushedOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ExchangeEventObject {
  pair: string;
  amountOut: BigNumber;
  output: string;
}
export type ExchangeEvent = TypedEvent<
  [string, BigNumber, string],
  ExchangeEventObject
>;

export type ExchangeEventFilter = TypedEventFilter<ExchangeEvent>;

export interface FeeChangedEventObject {
  feeRate: BigNumber;
  _feeRate: BigNumber;
}
export type FeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeeChangedEventObject
>;

export type FeeChangedEventFilter = TypedEventFilter<FeeChangedEvent>;

export interface LogFeeEventObject {
  fee: BigNumber;
  output: string;
}
export type LogFeeEvent = TypedEvent<[BigNumber, string], LogFeeEventObject>;

export type LogFeeEventFilter = TypedEventFilter<LogFeeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ProfitEventObject {
  profit: BigNumber;
}
export type ProfitEvent = TypedEvent<[BigNumber], ProfitEventObject>;

export type ProfitEventFilter = TypedEventFilter<ProfitEvent>;

export interface PushedOwnershipEventObject {
  candidateOwner: string;
}
export type PushedOwnershipEvent = TypedEvent<
  [string],
  PushedOwnershipEventObject
>;

export type PushedOwnershipEventFilter = TypedEventFilter<PushedOwnershipEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AggregationExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AggregationExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDex(
      dex: string,
      dexType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDexes(
      dexes: string[],
      dexTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactIn(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactInBlock(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calAndExecuteSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calMultihopBatchSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAmountOut: BigNumber }>;

    calSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    calbatchSwapExactInBlock(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAmountOut: BigNumber }>;

    callBytes(
      mode: BigNumberish,
      srcSpender: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delValidAddr(
      valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    executeSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllDexTypeAddrs(
      overrides?: CallOverrides
    ): Promise<[string[][]] & { dexes: string[][] }>;

    getDexTypeAddrs(
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { dexes: string[] }>;

    getDexes(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { dexes: string[] }>;

    getDexesAll(
      overrides?: CallOverrides
    ): Promise<
      [IEisenMultihopRouter.DexTypesStructOutput[]] & {
        dexes: IEisenMultihopRouter.DexTypesStructOutput[];
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pullOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDex(
      dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDexes(
      dexes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidAddr(
      valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    typeNum(overrides?: CallOverrides): Promise<[number]>;

    userBuybackAddr(overrides?: CallOverrides): Promise<[string]>;
  };

  addDex(
    dex: string,
    dexType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDexes(
    dexes: string[],
    dexTypes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactIn(
    srcSpender: string,
    to: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    swapSequences: IMultiAMM.SwapStruct[][],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactInBlock(
    srcSpender: string,
    to: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    swapSequences: IMultiAMM.SwapStruct[][][],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calAndExecuteSingleSwapExactIn(
    swapSequences: IMultiAMM.SwapStruct[],
    tokenIn: string,
    amountIn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calMultihopBatchSwapExactIn(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    swapSequences: IMultiAMM.SwapStruct[][],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calSingleSwapExactIn(
    swapSequences: IMultiAMM.SwapStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calbatchSwapExactInBlock(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    swapSequences: IMultiAMM.SwapStruct[][][],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callBytes(
    mode: BigNumberish,
    srcSpender: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delValidAddr(
    valAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  executeSingleSwapExactIn(
    swapSequences: IMultiAMM.SwapStruct[],
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllDexTypeAddrs(overrides?: CallOverrides): Promise<string[][]>;

  getDexTypeAddrs(
    dexType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getDexes(i: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  getDexesAll(
    overrides?: CallOverrides
  ): Promise<IEisenMultihopRouter.DexTypesStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pullOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDex(
    dex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDexes(
    dexes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueFunds(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidAddr(
    valAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  typeNum(overrides?: CallOverrides): Promise<number>;

  userBuybackAddr(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addDex(
      dex: string,
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addDexes(
      dexes: string[],
      dexTypes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchSwapExactIn(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapExactInBlock(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calAndExecuteSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calMultihopBatchSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calbatchSwapExactInBlock(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callBytes(
      mode: BigNumberish,
      srcSpender: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delValidAddr(valAddr: string, overrides?: CallOverrides): Promise<void>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    executeSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllDexTypeAddrs(overrides?: CallOverrides): Promise<string[][]>;

    getDexTypeAddrs(
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getDexes(i: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    getDexesAll(
      overrides?: CallOverrides
    ): Promise<IEisenMultihopRouter.DexTypesStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pullOwnership(overrides?: CallOverrides): Promise<void>;

    pushOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    removeDex(dex: string, overrides?: CallOverrides): Promise<void>;

    removeDexes(dexes: string[], overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidAddr(valAddr: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    typeNum(overrides?: CallOverrides): Promise<number>;

    userBuybackAddr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Exchange(address,uint256,address)"(
      pair?: null,
      amountOut?: null,
      output?: null
    ): ExchangeEventFilter;
    Exchange(pair?: null, amountOut?: null, output?: null): ExchangeEventFilter;

    "FeeChanged(uint256,uint256)"(
      feeRate?: null,
      _feeRate?: null
    ): FeeChangedEventFilter;
    FeeChanged(feeRate?: null, _feeRate?: null): FeeChangedEventFilter;

    "LogFee(uint256,address)"(fee?: null, output?: null): LogFeeEventFilter;
    LogFee(fee?: null, output?: null): LogFeeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Profit(uint256)"(profit?: null): ProfitEventFilter;
    Profit(profit?: null): ProfitEventFilter;

    "PushedOwnership(address)"(
      candidateOwner?: string | null
    ): PushedOwnershipEventFilter;
    PushedOwnership(candidateOwner?: string | null): PushedOwnershipEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addDex(
      dex: string,
      dexType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDexes(
      dexes: string[],
      dexTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapExactIn(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapExactInBlock(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calAndExecuteSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calMultihopBatchSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calbatchSwapExactInBlock(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callBytes(
      mode: BigNumberish,
      srcSpender: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delValidAddr(
      valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    executeSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllDexTypeAddrs(overrides?: CallOverrides): Promise<BigNumber>;

    getDexTypeAddrs(
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDexes(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDexesAll(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pullOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDex(
      dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDexes(
      dexes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidAddr(
      valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    typeNum(overrides?: CallOverrides): Promise<BigNumber>;

    userBuybackAddr(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addDex(
      dex: string,
      dexType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDexes(
      dexes: string[],
      dexTypes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactIn(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactInBlock(
      srcSpender: string,
      to: string,
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calAndExecuteSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calMultihopBatchSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calbatchSwapExactInBlock(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      swapSequences: IMultiAMM.SwapStruct[][][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callBytes(
      mode: BigNumberish,
      srcSpender: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delValidAddr(
      valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeSingleSwapExactIn(
      swapSequences: IMultiAMM.SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllDexTypeAddrs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexTypeAddrs(
      dexType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexes(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDexesAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDex(
      dex: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDexes(
      dexes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidAddr(
      valAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    typeNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBuybackAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
