/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IKlayswapExchangeInterface extends utils.Interface {
  functions: {
    "addKctLiquidity(uint256,uint256)": FunctionFragment;
    "addKctLiquidityWithLimit(uint256,uint256,uint256,uint256)": FunctionFragment;
    "addKlayLiquidity(uint256)": FunctionFragment;
    "addKlayLiquidityWithLimit(uint256,uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeFee(uint256)": FunctionFragment;
    "changeMiningRate(uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "decimals()": FunctionFragment;
    "estimateNeg(address,uint256)": FunctionFragment;
    "estimatePos(address,uint256)": FunctionFragment;
    "exchangeNeg(address,uint256)": FunctionFragment;
    "exchangePos(address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "getCurrentPool()": FunctionFragment;
    "grabKlayFromFactory()": FunctionFragment;
    "initPool(address)": FunctionFragment;
    "lastMined()": FunctionFragment;
    "mining()": FunctionFragment;
    "miningIndex()": FunctionFragment;
    "name()": FunctionFragment;
    "removeLiquidity(uint256)": FunctionFragment;
    "removeLiquidityWithLimit(uint256,uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenA()": FunctionFragment;
    "tokenB()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateMiningIndex()": FunctionFragment;
    "userLastIndex(address)": FunctionFragment;
    "userRewardSum(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addKctLiquidity"
      | "addKctLiquidityWithLimit"
      | "addKlayLiquidity"
      | "addKlayLiquidityWithLimit"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "changeFee"
      | "changeMiningRate"
      | "claimReward"
      | "decimals"
      | "estimateNeg"
      | "estimatePos"
      | "exchangeNeg"
      | "exchangePos"
      | "factory"
      | "fee"
      | "getCurrentPool"
      | "grabKlayFromFactory"
      | "initPool"
      | "lastMined"
      | "mining"
      | "miningIndex"
      | "name"
      | "removeLiquidity"
      | "removeLiquidityWithLimit"
      | "symbol"
      | "tokenA"
      | "tokenB"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "updateMiningIndex"
      | "userLastIndex"
      | "userRewardSum"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addKctLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addKctLiquidityWithLimit",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addKlayLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addKlayLiquidityWithLimit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMiningRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateNeg",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatePos",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeNeg",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangePos",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grabKlayFromFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initPool", values: [string]): string;
  encodeFunctionData(functionFragment: "lastMined", values?: undefined): string;
  encodeFunctionData(functionFragment: "mining", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithLimit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMiningIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userLastIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardSum",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addKctLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKctLiquidityWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKlayLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKlayLiquidityWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMiningRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateNeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatePos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeNeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangePos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grabKlayFromFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastMined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMiningIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardSum",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IKlayswapExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKlayswapExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addKctLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addKctLiquidityWithLimit(
      amountA: BigNumberish,
      amountB: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addKlayLiquidity(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addKlayLiquidityWithLimit(
      amount: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMiningRate(
      _mining: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    estimateNeg(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimatePos(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exchangeNeg(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangePos(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPool(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    grabKlayFromFactory(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initPool(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastMined(overrides?: CallOverrides): Promise<[BigNumber]>;

    mining(overrides?: CallOverrides): Promise<[BigNumber]>;

    miningIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityWithLimit(
      amount: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenA(overrides?: CallOverrides): Promise<[string]>;

    tokenB(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMiningIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userLastIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userRewardSum(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addKctLiquidity(
    amountA: BigNumberish,
    amountB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addKctLiquidityWithLimit(
    amountA: BigNumberish,
    amountB: BigNumberish,
    minAmountA: BigNumberish,
    minAmountB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addKlayLiquidity(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addKlayLiquidityWithLimit(
    amount: BigNumberish,
    minAmountA: BigNumberish,
    minAmountB: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMiningRate(
    _mining: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  estimateNeg(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimatePos(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exchangeNeg(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangePos(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPool(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  grabKlayFromFactory(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initPool(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastMined(overrides?: CallOverrides): Promise<BigNumber>;

  mining(overrides?: CallOverrides): Promise<BigNumber>;

  miningIndex(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityWithLimit(
    amount: BigNumberish,
    minAmountA: BigNumberish,
    minAmountB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenA(overrides?: CallOverrides): Promise<string>;

  tokenB(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMiningIndex(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userLastIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userRewardSum(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addKctLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addKctLiquidityWithLimit(
      amountA: BigNumberish,
      amountB: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addKlayLiquidity(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addKlayLiquidityWithLimit(
      amount: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeMiningRate(
      _mining: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    estimateNeg(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimatePos(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeNeg(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangePos(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPool(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    grabKlayFromFactory(overrides?: CallOverrides): Promise<void>;

    initPool(to: string, overrides?: CallOverrides): Promise<void>;

    lastMined(overrides?: CallOverrides): Promise<BigNumber>;

    mining(overrides?: CallOverrides): Promise<BigNumber>;

    miningIndex(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityWithLimit(
      amount: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenA(overrides?: CallOverrides): Promise<string>;

    tokenB(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateMiningIndex(overrides?: CallOverrides): Promise<void>;

    userLastIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userRewardSum(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addKctLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addKctLiquidityWithLimit(
      amountA: BigNumberish,
      amountB: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addKlayLiquidity(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addKlayLiquidityWithLimit(
      amount: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMiningRate(
      _mining: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    estimateNeg(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimatePos(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeNeg(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangePos(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPool(overrides?: CallOverrides): Promise<BigNumber>;

    grabKlayFromFactory(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initPool(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastMined(overrides?: CallOverrides): Promise<BigNumber>;

    mining(overrides?: CallOverrides): Promise<BigNumber>;

    miningIndex(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityWithLimit(
      amount: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<BigNumber>;

    tokenB(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMiningIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userLastIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userRewardSum(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addKctLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addKctLiquidityWithLimit(
      amountA: BigNumberish,
      amountB: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addKlayLiquidity(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addKlayLiquidityWithLimit(
      amount: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMiningRate(
      _mining: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateNeg(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimatePos(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeNeg(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangePos(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grabKlayFromFactory(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initPool(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastMined(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    miningIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityWithLimit(
      amount: BigNumberish,
      minAmountA: BigNumberish,
      minAmountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMiningIndex(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userLastIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardSum(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
