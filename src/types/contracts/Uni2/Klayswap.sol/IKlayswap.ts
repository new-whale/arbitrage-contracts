/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IKlayswapInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "createFee()": FunctionFragment;
    "createKctPool(address,uint256,address,uint256,uint256)": FunctionFragment;
    "createKlayPool(address,uint256,uint256)": FunctionFragment;
    "exchangeKctNeg(address,uint256,address,uint256,address[])": FunctionFragment;
    "exchangeKctPos(address,uint256,address,uint256,address[])": FunctionFragment;
    "exchangeKlayNeg(address,uint256,address[])": FunctionFragment;
    "exchangeKlayPos(address,uint256,address[])": FunctionFragment;
    "getAmountData(uint256,uint256)": FunctionFragment;
    "getPoolAddress(uint256)": FunctionFragment;
    "getPoolCount()": FunctionFragment;
    "name()": FunctionFragment;
    "tokenToPool(address,address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "createFee"
      | "createKctPool"
      | "createKlayPool"
      | "exchangeKctNeg"
      | "exchangeKctPos"
      | "exchangeKlayNeg"
      | "exchangeKlayPos"
      | "getAmountData"
      | "getPoolAddress"
      | "getPoolCount"
      | "name"
      | "tokenToPool"
      | "transfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "createFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createKctPool",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createKlayPool",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeKctNeg",
    values: [string, BigNumberish, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeKctPos",
    values: [string, BigNumberish, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeKlayNeg",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeKlayPos",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenToPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createKctPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createKlayPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeKctNeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeKctPos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeKlayNeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeKlayPos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;

  events: {};
}

export interface IKlayswap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKlayswapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    createFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    createKctPool(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createKlayPool(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeKctNeg(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeKctPos(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeKlayNeg(
      token: string,
      amount: BigNumberish,
      path: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeKlayPos(
      token: string,
      amount: BigNumberish,
      path: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountData(
      si: BigNumberish,
      ei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    getPoolAddress(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    tokenToPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  createFee(overrides?: CallOverrides): Promise<BigNumber>;

  createKctPool(
    tokenA: string,
    amountA: BigNumberish,
    tokenB: string,
    amountB: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createKlayPool(
    token: string,
    amount: BigNumberish,
    fee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeKctNeg(
    tokenA: string,
    amountA: BigNumberish,
    tokenB: string,
    amountB: BigNumberish,
    path: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeKctPos(
    tokenA: string,
    amountA: BigNumberish,
    tokenB: string,
    amountB: BigNumberish,
    path: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeKlayNeg(
    token: string,
    amount: BigNumberish,
    path: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeKlayPos(
    token: string,
    amount: BigNumberish,
    path: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountData(
    si: BigNumberish,
    ei: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

  getPoolAddress(idx: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  tokenToPool(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createFee(overrides?: CallOverrides): Promise<BigNumber>;

    createKctPool(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createKlayPool(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeKctNeg(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeKctPos(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeKlayNeg(
      token: string,
      amount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeKlayPos(
      token: string,
      amount: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountData(
      si: BigNumberish,
      ei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    getPoolAddress(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    tokenToPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createFee(overrides?: CallOverrides): Promise<BigNumber>;

    createKctPool(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createKlayPool(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeKctNeg(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeKctPos(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeKlayNeg(
      token: string,
      amount: BigNumberish,
      path: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeKlayPos(
      token: string,
      amount: BigNumberish,
      path: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountData(
      si: BigNumberish,
      ei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAddress(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createKctPool(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createKlayPool(
      token: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeKctNeg(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeKctPos(
      tokenA: string,
      amountA: BigNumberish,
      tokenB: string,
      amountB: BigNumberish,
      path: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeKlayNeg(
      token: string,
      amount: BigNumberish,
      path: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeKlayPos(
      token: string,
      amount: BigNumberish,
      path: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountData(
      si: BigNumberish,
      ei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAddress(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToPool(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
